generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders Order[]
  addresses Address[]
  
  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  street      String
  city        String
  state       String
  zipCode     String
  country     String   @default("US")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  @@map("addresses")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  images      String[]
  categoryId  String
  inStock     Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category    Category @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  orders      OrderItem[]
  
  @@map("products")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  size      Size
  color     String
  stock     Int      @default(0)
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, size, color])
  @@map("product_variants")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  
  products    Product[]
  
  @@map("categories")
}

model Order {
  id          String   @id @default(cuid())
  userId      String?
  orderNumber String   @unique
  status      OrderStatus @default(PENDING)
  total       Decimal
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  
  // Customer info (snapshot at time of order)
  customerEmail String
  customerName  String
  shippingAddress Json
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?      @relation(fields: [userId], references: [id])
  items       OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  variantId   String
  quantity    Int
  price       Decimal
  
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

enum Role {
  USER
  ADMIN
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  COD
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}